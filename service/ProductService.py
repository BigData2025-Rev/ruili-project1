import bcrypt
import jwt
from dao.UserDAO import UserDAO
from model.Product import Product
from dao.ProductDAO import ProductDAO
from datetime import datetime, timedelta, timezone
from config.config import Config

class ProductService:

    @staticmethod
    def get_all_products():
        products = [product.to_dict() for product in ProductDAO.get_all_products()]
        return {"success": True, "products": products}

    @staticmethod
    def add_product(product):
        product = Product(
            product_id=None,  # id generated by database
            name=product['name'],
            price=product['price'],
            inventory=product['inventory'],
            category=product['category'],  # can be empty
            description=product['description'] # can be empty
        )
        product_id = ProductDAO.create_product(product)
        if product_id is None:
            return {"success": False, "message": "product insert failed."}
        return {"success": True, "product_id": product_id}


    @staticmethod
    def update_inventory_by_id(product_id, change_amount):
        product = ProductDAO.get_product_by_id(product_id)
        if product is None:
            return {"success": False, "message": "Product does not exist."}
        new_inventory = product.inventory + change_amount
        if new_inventory < 0:
            return {"success": False, "message": "Inventory cannot be negative."}
        success = ProductDAO.update_inventory_by_id(product_id, new_inventory) > 0
        return {"success": success, "message": "Inventory updated successfully." if success else "Failed to update inventory."}


    @staticmethod
    def update_price_by_id(product_id, new_price):
        product = ProductDAO.get_product_by_id(product_id)
        if product is None:
            return {"success": False, "message": f"Product not exist."}
        affected_line = ProductDAO.update_price_by_id(product_id, new_price) > 0
        return {"success": True, "message": f"Line affected by inventory change: {affected_line}"}

    @staticmethod
    def delete_product_by_id(product_id):
        deleted_rows = ProductDAO.delete_product_by_id(product_id)
        return {"success": True, "message": f"deleted rows: {deleted_rows}"}

